// Generated by CoffeeScript 1.2.1-pre
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(['backbone'], function(BackBone) {
    var SearchList, SearchListView, SearchTrack, SearchTrackView, SearchView, models, searchList, searchListView, searchView, sp, ui, views;
    sp = getSpotifyApi(1);
    models = sp.require("sp://import/scripts/api/models");
    views = sp.require("sp://import/scripts/api/views");
    ui = sp.require("sp://import/scripts/ui");
    SearchList = (function(_super) {

      __extends(SearchList, _super);

      SearchList.name = 'SearchList';

      function SearchList() {
        return SearchList.__super__.constructor.apply(this, arguments);
      }

      return SearchList;

    })(Backbone.Collection);
    searchList = new SearchList();
    SearchTrack = (function(_super) {

      __extends(SearchTrack, _super);

      SearchTrack.name = 'SearchTrack';

      function SearchTrack() {
        return SearchTrack.__super__.constructor.apply(this, arguments);
      }

      return SearchTrack;

    })(Backbone.Model);
    SearchTrackView = (function(_super) {

      __extends(SearchTrackView, _super);

      SearchTrackView.name = 'SearchTrackView';

      function SearchTrackView() {
        this.render = __bind(this.render, this);
        return SearchTrackView.__super__.constructor.apply(this, arguments);
      }

      SearchTrackView.prototype.render = function() {
        var track;
        track = this.model.get("track");
        return track.title.decodeForHTML();
      };

      return SearchTrackView;

    })(Backbone.View);
    SearchListView = (function(_super) {

      __extends(SearchListView, _super);

      SearchListView.name = 'SearchListView';

      function SearchListView() {
        this.render = __bind(this.render, this);
        return SearchListView.__super__.constructor.apply(this, arguments);
      }

      SearchListView.prototype.el = "#song-list";

      SearchListView.prototype.initialize = function() {
        return searchList.on('add', this.render);
      };

      SearchListView.prototype.render = function(searchTrack) {
        var view;
        console.log("added");
        view = new SearchTrackView({
          model: searchTrack
        });
        console.log(this.$el);
        console.log(view.render());
        console.log("end");
        return this.$el.append(view.render());
      };

      return SearchListView;

    })(Backbone.View);
    SearchView = (function(_super) {

      __extends(SearchView, _super);

      SearchView.name = 'SearchView';

      function SearchView() {
        return SearchView.__super__.constructor.apply(this, arguments);
      }

      SearchView.prototype.el = "#song_selector";

      SearchView.prototype.events = {
        "keypress": "keypress"
      };

      SearchView.prototype.keypress = function(event) {
        var query, search,
          _this = this;
        if (event.charCode === 13) {
          query = ($(event.target)).val();
          search = new models.Search(query);
          search.localResults = models.LOCALSEARCHRESULTS.APPEND;
          search.observe(models.EVENT.CHANGE, function() {
            var result_count;
            result_count = search.tracks.length;
            console.log("found " + result_count + " tracks for ");
            return _(search.tracks).each(function(track) {
              var searchTrack;
              searchTrack = new SearchTrack({
                track: track
              });
              console.log(searchTrack);
              return searchList.add(searchTrack);
            });
          });
          return search.appendNext();
        }
      };

      return SearchView;

    })(Backbone.View);
    searchView = new SearchView();
    searchListView = new SearchListView();
    return {
      searchView: searchView
    };
  });

}).call(this);
