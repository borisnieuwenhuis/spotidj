// Generated by CoffeeScript 1.2.1-pre
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(['backbone'], function(Backbone) {
    var AppView, SearchSong, SearchView, SongPainter, SongWatcher, appView, models, player, searchSong, searchView, songPainter, songWatcher, sp, ui, views;
    sp = getSpotifyApi(1);
    models = sp.require("sp://import/scripts/api/models");
    views = sp.require("sp://import/scripts/api/views");
    ui = sp.require("sp://import/scripts/ui");
    player = models.player;
    SongWatcher = (function(_super) {

      __extends(SongWatcher, _super);

      SongWatcher.name = 'SongWatcher';

      function SongWatcher() {
        return SongWatcher.__super__.constructor.apply(this, arguments);
      }

      SongWatcher.prototype.initialize = function() {
        var change;
        change = _.bind(function(e) {
          var track;
          if (e.data.curtrack === true) {
            track = player.track;
            return this.set({
              "track": track
            });
          }
        }, this);
        return player.observe(models.EVENT.CHANGE, change);
      };

      return SongWatcher;

    })(Backbone.Model);
    SearchSong = (function(_super) {

      __extends(SearchSong, _super);

      SearchSong.name = 'SearchSong';

      function SearchSong() {
        this.search = __bind(this.search, this);
        return SearchSong.__super__.constructor.apply(this, arguments);
      }

      SearchSong.prototype.search = function(text) {
        var search,
          _this = this;
        console.log("searching for " + text);
        this.set({
          text: text
        });
        search = new models.Search(text);
        search.localResults = models.LOCALSEARCHRESULTS.APPEND;
        console.log(search);
        search.observe(models.EVENT.CHANGE, function() {
          var random_index, result_count;
          result_count = search.tracks.length;
          console.log("found " + result_count + " tracks for " + text);
          if (result_count > 0) {
            random_index = Math.floor(result_count * Math.random());
            console.log("now playing " + random_index);
            return player.play(search.tracks[random_index].uri);
          } else {
            return alert("no tracks found for " + text);
          }
        });
        return search.appendNext();
      };

      return SearchSong;

    })(Backbone.Model);
    songWatcher = new SongWatcher();
    searchSong = new SearchSong();
    SongPainter = (function(_super) {

      __extends(SongPainter, _super);

      SongPainter.name = 'SongPainter';

      function SongPainter() {
        this.trackChanged = __bind(this.trackChanged, this);
        return SongPainter.__super__.constructor.apply(this, arguments);
      }

      SongPainter.prototype.el = $("#photo_container");

      SongPainter.prototype.initialize = function() {
        return songWatcher.bind("change:track", this.trackChanged, this);
      };

      SongPainter.prototype.trackChanged = function(track) {
        var apiKey, photo_container, text;
        text = searchSong.get("text");
        apiKey = "901b46f27dc2bd94a0c46c0f96f60d34";
        photo_container = $(this.el);
        photo_container.empty();
        return $.getJSON("http://api.flickr.com/services/rest/?method=flickr.photos.search&api_key=" + apiKey + "&text=" + text + "&format=json&jsoncallback=?", function(data) {
          var fadeIn, j;
          $.each(data.photos.photo, function(j, item) {
            var photoUrl;
            photoUrl = 'http://farm' + item.farm + '.static.flickr.com/' + item.server + '/' + item.id + '_' + item.secret + '_m.jpg';
            return photo_container.append("<img style=\"display: none;\" src=\"" + photoUrl + "\">");
          });
          j = 0;
          fadeIn = function() {
            var photoChild;
            photoChild = photo_container.children().get(j);
            ($("body")).scrollTo(photoChild);
            return ($(photoChild)).fadeIn(1000, function() {
              j++;
              if (j < photo_container.children().length) {
                return ($("body")).scrollTo(photoChild);
              }
            });
          };
          return fadeIn();
        });
      };

      return SongPainter;

    })(Backbone.View);
    songPainter = new SongPainter();
    AppView = (function(_super) {

      __extends(AppView, _super);

      AppView.name = 'AppView';

      function AppView() {
        return AppView.__super__.constructor.apply(this, arguments);
      }

      AppView.prototype.el = "body";

      AppView.prototype.events = {
        "click #login": "showLogin"
      };

      AppView.prototype.showLogin = function() {
        var auth;
        auth = sp.require('sp://import/scripts/api/auth');
        return auth.authenticateWithFacebook('291638010878776', ['user_about_me', 'user_checkins'], {
          onSuccess: function(accessToken, ttl) {
            return console.log("Success! Here's the access token: " + accessToken);
          },
          onFailure: function(error) {
            return console.log("Authentication failed with error: " + error);
          },
          onComplete: function() {
            return console.log("test");
          }
        });
      };

      return AppView;

    })(Backbone.View);
    appView = new AppView();
    SearchView = (function(_super) {

      __extends(SearchView, _super);

      SearchView.name = 'SearchView';

      function SearchView() {
        return SearchView.__super__.constructor.apply(this, arguments);
      }

      SearchView.prototype.el = "#song_selector";

      SearchView.prototype.events = {
        "keypress": "keypress"
      };

      SearchView.prototype.keypress = function(event) {
        if (event.charCode === 13) return searchSong.search($(event.target).val());
      };

      return SearchView;

    })(Backbone.View);
    return searchView = new SearchView();
  });

}).call(this);
